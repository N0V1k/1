import numpy as np
import math

x = np.arange(1, 2.1, 0.1)
h = 0.1
y_0 = 1
z = 1
z_diff = lambda x, y, z: -2 * z * 1 / math.tan(x) - 3 * y


def Euler(x, h, y_0, z, z_diff):
    T = np.zeros((len(x), 6))
    T[0][0] = x[0]
    T[0][1] = y_0
    T[0][2] = z
    T[0][4] = (z_diff(T[0][0], T[0][1], T[0][2]) + 2 * 1 / math.tan(T[0][0])) / 3
    for i in range(1, len(T)):
        T[i][0] = x[i]
        T[i][1] = T[i - 1][1] + h * T[i - 1][2]
        T[i][2] = T[i - 1][2] + h * z_diff(T[i - 1][0], T[i - 1][1], T[i - 1][2])
        T[i][3] = h * z_diff(T[i - 1][0], T[i - 1][1], T[i - 1][2])
        T[i][4] = (-0.9783*np.cos(2 * T[i][0]) + 0.4776 * np.sin(2 * T[i][0])) / np.sin(T[i][0])
        T[i][5] = abs(T[i][4] - T[i][1])
    return T


def Runge_Kutta(x, h, y_0, z, z_diff):
    T = np.zeros((len(x), 6))
    K = np.zeros((len(x), 4))
    L = np.zeros((len(x), 4))
    T[0][0] = x[0]
    T[0][1] = y_0
    T[0][2] = z
    for i in range(len(T)):
        if i != 0:
            T[i][1] = T[i - 1][1] + T[i - 1][3]
            T[i][2] = T[i - 1][2] + T[i - 1][4]
        T[i][0] = x[i]
        K[i][0] = h * T[i][2]
        L[i][0] = h * z_diff(T[i][0], T[i][1], T[i][2])
        K[i][1] = h * (T[i][2] + 1 / 2 * L[i][0])
        L[i][1] = h * z_diff(T[i][0] + 1 / 2 * h, T[i][1] + 1 / 2 * K[i][0], T[i][2] + 1 / 2 * L[i][0])
        K[i][2] = h * (T[i][2] + 1 / 2 * L[i][1])
        L[i][2] = h * z_diff(T[i][0] + 1 / 2 * h, T[i][1] + 1 / 2 * K[i][1], T[i][2] + 1 / 2 * L[i][1])
        K[i][3] = h * (T[i][2] + L[i][2])
        L[i][3] = h * z_diff(T[i][0] + h, T[i][1] + K[i][2], T[i][2] + L[i][2])
        T[i][3] = 1 / 6 * (K[i][1] + 2 * K[i][1] + 2 * K[i][2] + K[i][3])
        T[i][4] = 1 / 6 * (L[i][0] + 2 * L[i][1] + 2 * L[i][2] + L[i][3])
        T[i][5] = (-0.9783*np.cos(2 * T[i][0]) + 0.4776 * np.sin(2 * T[i][0])) / np.sin(T[i][0])
    return T


def Adams(x, h, y_0, z, z_diff):
    T = np.zeros((len(x), 6))
    K = np.zeros((len(x), 4))
    L = np.zeros((len(x), 4))
    T[0][0] = x[0]
    T[0][1] = y_0
    T[0][2] = z
    for i in range(4):
        T[i][0] = x[i]
        T[i][1] = Runge_Kutta(x, h, y_0, z, z_diff)[i][1]
        T[i][2] = Runge_Kutta(x, h, y_0, z, z_diff)[i][2]
        T[i][3] = Runge_Kutta(x, h, y_0, z, z_diff)[i][3]
        T[i][4] = Runge_Kutta(x, h, y_0, z, z_diff)[i][4]
        T[i][5] = Runge_Kutta(x, h, y_0, z, z_diff)[i][5]
    for i in range(4, len(T)):
        T[i][0] = x[i]
        T[i][1] = T[i - 1][1] + h / 24 * (55 * T[i - 1][2] - 59 * T[i - 2][2] + 37 * T[i - 3][2] - 9 * T[i - 4][2])
        T[i][2] = T[i - 1][2] + h / 24 * (55 * z_diff(T[i - 1][0], T[i - 1][1], T[i - 1][2]) - 59 * z_diff(T[i - 2][0], T[i - 2][1], T[i - 2][2]) + 37 * z_diff(T[i - 3][0], T[i - 3][1], T[i - 3][2]) - 9 * z_diff(T[i - 4][0], T[i - 4][1], T[i - 4][2]))
        T[i][5] = (-0.9783 * np.cos(2 * T[i][0]) + 0.4776 * np.sin(2 * T[i][0])) / np.sin(T[i][0])
    return T


def Abs(Euler, Euler2, Runge, Runge2, Adams, Adams2):
    k = 0
    Euler_res = np.zeros(len(Euler))
    Runge_res = np.zeros(len(Runge))
    Adams_res = np.zeros(len(Adams))
    for i in range(len(Euler)):
        Euler_res[i] = Euler[i] + (Euler2[k] - Euler[i]) / (1 - 0.5**2)
        Runge_res[i] = Runge[i] + (Runge2[k] - Runge[i]) / (1 - 0.5**2)
        Adams_res[i] = Adams[i] + (Adams2[k] - Adams[i]) / (1 - 0.5**2)
        k += 2
    return Euler_res, Runge_res, Adams_res


np.set_printoptions(precision=3, floatmode='fixed')
print("Метод Эйлера")
print("====x=======y======z====delta==yTrue====E====")
print(Euler(x, h, y_0, z, z_diff))
print('X:')
print(Euler(x, h, y_0, z, z_diff)[:, 0])
print('Y:')
print(Euler(x, h, y_0, z, z_diff)[:, 1])
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("Метод Рунге-Кутта")
print("====x=======y======z====del_y==del_z==yTrue==")
print(Runge_Kutta(x, h, y_0, z, z_diff))
print('X:')
print(Runge_Kutta(x, h, y_0, z, z_diff)[:, 0])
print('Y:')
print(Runge_Kutta(x, h, y_0, z, z_diff)[:, 1])
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("Метод Адамса")
print("====x=======y======z====del_y==del_z==yTrue==")
print(Adams(x, h, y_0, z, z_diff))
print('X:')
print(Adams(x, h, y_0, z, z_diff)[:, 0])
print('Y:')
print(Adams(x, h, y_0, z, z_diff)[:, 1])
print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("Метод Рунге-Ромберга")
print("Для Эйлера:")
print(Abs(Euler(x, h, y_0, z, z_diff)[:, 1], Euler(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Runge_Kutta(x, h, y_0, z, z_diff)[:, 1], Runge_Kutta(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Adams(x, h, y_0, z, z_diff)[:, 1], Adams(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1])[0])
print("Для Рунге-Кутты:")
print(Abs(Euler(x, h, y_0, z, z_diff)[:, 1], Euler(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Runge_Kutta(x, h, y_0, z, z_diff)[:, 1], Runge_Kutta(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Adams(x, h, y_0, z, z_diff)[:, 1], Adams(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1])[1])
print("Для Адамса:")
print(Abs(Euler(x, h, y_0, z, z_diff)[:, 1], Euler(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Runge_Kutta(x, h, y_0, z, z_diff)[:, 1], Runge_Kutta(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1], Adams(x, h, y_0, z, z_diff)[:, 1], Adams(np.arange(1, 2.1, 0.1 / 2), h / 2, y_0, z, z_diff)[:, 1])[2])
